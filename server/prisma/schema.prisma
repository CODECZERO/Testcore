// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model College {
  Id            String      @id @default(uuid())
  name          String      @unique
  password      String
  refreshToken  String
  phoneNumber   String
  email         String      @unique
  address       String
  collegeVerify Boolean
  students      Student[]
  examiner      Examiner[]
}

model Examiner {
  Id             String    @id @default(uuid())
  name           String
  email          String    @unique
  phoneNumber    String
  password       String
  address        String
  examinerVerify Boolean  
  refreshToken   String
  college        College[]
  exams          Exam[]
}

model Student {
  Id             String          @id @default(uuid())
  name           String
  email          String          @unique
  phoneNumber    String
  password       String
  address        String
  studentVerify  Boolean       
  refreshToken   String
  collegeID      String
  college        College         @relation(fields: [collegeID], references: [Id])
  exams          Exam[]
  results        Result[]
  questionPapers QuestionPaper[]
  subject        Subject[]
}

model Exam {
  Id             String          @id @default(uuid())
  subjectID      String
  examName       String          
  date           DateTime
  examStart      DateTime
  examEnd        DateTime
  examDuration   DateTime
  examinerID     String
  
  examiner       Examiner        @relation(fields: [examinerID], references: [Id])
  students       Student[]
  results        Result[]
  questionPapers QuestionPaper[]
  Subject        Subject         @relation(fields: [subjectID], references: [Id])
}

model Subject {
  Id            String      @id @default(uuid())
  subjectCode   String      @unique
  subjectName   String      @unique
  subjectVerify Boolean
  exams         Exam[]
  student       Student[]
}

model QuestionPaper {
  Id        String @id @default(uuid())
  examID    String
  studentID String
  SubjectID String
  question  Json
  answer    String

  exam    Exam     @relation(fields: [examID], references: [Id])
  student Student  @relation(fields: [studentID], references: [Id])
  Result  Result[]
}

model Result {
  Id              String        @id @default(uuid())
  marks           Float
  resultVerify    Boolean       @default(false)
  passingMark     Float         @default(35)
  obtainedMarks   Float         @default(0)
  totalMarks      Float         @default(100)
  questionPaperID String
  StudentId       String
  
  questionPaper   QuestionPaper @relation(fields: [questionPaperID], references: [Id])
  Student         Student?      @relation(fields: [StudentId], references: [Id])
  Exam            Exam?         @relation(fields: [examExamID], references: [Id])
  examExamID      String?
}
